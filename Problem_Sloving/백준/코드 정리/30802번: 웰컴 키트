** 주의 사항 ** 
1. cmath 라이브러리 중에서, 반올림이 필요할 경우(그냥 반올림이 아닌, 소수점이 있으면 무조건 반올림하는 함수)std::ceil이라는 함수 사용하기
2. 이 문제의 핵심 알고리즘은 나누기와 나머지 연산의 활용이다.


#include <iostream>
#include <array>
#include <cmath>
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
     
    int iTotal = 0;
    std::cin >> iTotal;

    std::array<int, 6> arrShirt_Size = {};
    for (int i = 0; i < arrShirt_Size.size(); i++)
    {
        std::cin >> arrShirt_Size[i];
    }

    int iT = 0, iP = 0;
    std::cin >> iT >> iP;

    int iShirtCount = 0;
    for (int i = 0; i < arrShirt_Size.size(); i++)
    {
        iShirtCount += std::ceil(static_cast<double>(arrShirt_Size[i]) / iT);
    }

    std::cout << iShirtCount << '\n';
    std::cout << iTotal / iP << ' ' << iTotal % iP;

    return 0;
}
